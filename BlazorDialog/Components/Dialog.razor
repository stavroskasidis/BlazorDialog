@inject IBlazorDialogService dialogService
@inject IBlazorDialogStore dialogStore
@namespace BlazorDialog
@implements IDisposable
@if (isShowing)
{
    <CascadingValue Value="this" Name="ParentDialog" IsFixed="true">
        <CascadingValue Value="this.Input" Name="DialogInput">
            @if (!IsCustom)
            {
                <div class="blazor-dialog-container @(Centered ? "blazor-dialog-centered" : "")">
                    <div class="blazor-dialog-content-wrapper @ContentWrapperCssClass">
                        <div class="blazor-dialog-content">
                            @ChildContent
                        </div>
                    </div>
                </div>
            }
            else
            {
                @ChildContent
            }
        </CascadingValue>
    </CascadingValue>
}

@code{
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string Id { get; set; }
    [Parameter] public bool? IsShowing { get; set; }
    private bool isShowing;
    [Parameter] public object Input { get; set; }
    [Parameter] public EventCallback<DialogBeforeShowEventArgs> OnBeforeShow { get; set; }
    [Parameter] public EventCallback<DialogAfterShowEventArgs> OnAfterShow { get; set; }
    [Parameter] public EventCallback<DialogBeforeHideEventArgs> OnBeforeHide { get; set; }
    [Parameter] public EventCallback<DialogAfterHideEventArgs> OnAfterHide { get; set; }
    [Parameter] public DialogSize Size { get; set; } = DialogSize.Normal;
    [Parameter] public bool Centered { get; set; }
    [Parameter] public bool IsCustom { get; set; }

    protected TaskCompletionSource<object> taskCompletionSource;
    internal Action<object> OnDialogHide;
    protected void NotifyDialogHidden(object result) => OnDialogHide?.Invoke(result);

    protected string ContentWrapperCssClass
    {
        get
        {
            switch (Size)
            {
                case DialogSize.Normal:
                    return "";
                case DialogSize.Small:
                    return "blazor-dialog-content-wrapper-small";
                case DialogSize.Large:
                    return "blazor-dialog-content-wrapper-large";
                case DialogSize.ExtraLarge:
                    return "blazor-dialog-content-wrapper-xlarge";
                default:
                    throw new Exception("Unknown dialog size");
            }
        }
    }


    protected override void OnInitialized()
    {
        if (Id != null)
        {
            dialogStore.Register(this);
        }
        OnDialogHide = (object result) =>
        {
            if (taskCompletionSource != null)
            {
                taskCompletionSource.SetResult(result);
                taskCompletionSource = null;
            }
        };
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        isShowingChanged = parameters.TryGetValue(nameof(IsShowing), out bool? newIsShowing) && newIsShowing != IsShowing;
        await base.SetParametersAsync(parameters);
    }

    bool isShowingChanged = false;

    protected override async Task OnParametersSetAsync()
    {
        if (isShowingChanged && IsShowing == true && !isShowing)
        {
            if (OnBeforeShow.HasDelegate)
            {
                var args = new DialogBeforeShowEventArgs(this);
                await OnBeforeShow.InvokeAsync(args);
            }
            this.isShowing = true;
            if (OnAfterShow.HasDelegate)
            {
                var args = new DialogAfterShowEventArgs(this);
                await OnAfterShow.InvokeAsync(args);
            }
        }
        else if (isShowingChanged && IsShowing == false && isShowing)
        {
            if (OnBeforeHide.HasDelegate)
            {
                var args = new DialogBeforeHideEventArgs(this);
                await OnBeforeHide.InvokeAsync(args);
            }
            this.isShowing = false;
            if (OnAfterHide.HasDelegate)
            {
                var args = new DialogAfterHideEventArgs(this);
                await OnAfterHide.InvokeAsync(args);
            }
        }
    }

    public void Dispose()
    {
        dialogStore.Unregister(this);
        if (taskCompletionSource != null)
        {
            taskCompletionSource.SetCanceled();
            taskCompletionSource = null;
        }
    }

    public async Task Show()
    {
        await Show<object>();
    }

    public async Task<TResult> Show<TResult>()
    {
        this.Input = null;
        return (TResult)await ShowInternal();
    }

    public async Task Show(object input)
    {
        await this.Show<object>(input);
    }

    public async Task<TResult> Show<TResult>(object input)
    {
        this.Input = input;
        return (TResult)await ShowInternal();
    }

    private async Task<object> ShowInternal()
    {
        if (OnBeforeShow.HasDelegate)
        {
            var args = new DialogBeforeShowEventArgs(this);
            await OnBeforeShow.InvokeAsync(args);
        }
        this.isShowing = true;
        await InvokeAsync(() => StateHasChanged());
        if (OnAfterShow.HasDelegate)
        {
            var args = new DialogAfterShowEventArgs(this);
            await OnAfterShow.InvokeAsync(args);
        }
        if (taskCompletionSource != null)
        {
            taskCompletionSource.SetCanceled();
            taskCompletionSource = null;
        }

        taskCompletionSource = new TaskCompletionSource<object>();
        return await taskCompletionSource.Task;
    }


    public async Task Hide<TResult>(TResult result)
    {
        if (OnBeforeHide.HasDelegate)
        {
            var args = new DialogBeforeHideEventArgs(this);
            await OnBeforeHide.InvokeAsync(args);
        }
        this.isShowing = false;
        NotifyDialogHidden(result);
        await InvokeAsync(() => StateHasChanged());
        if (OnAfterHide.HasDelegate)
        {
            var args = new DialogAfterHideEventArgs(this);
            await OnAfterHide.InvokeAsync(args);
        }
    }

    public async Task Hide()
    {
        await this.Hide<object>(null);
    }
}
